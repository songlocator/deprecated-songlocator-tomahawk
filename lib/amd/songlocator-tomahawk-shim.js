define(function(require, exports, module) {
// Generated by CoffeeScript 1.4.0
/*
  Shim which allows to re-use tomahawk resolvers almost "as-is".
*/

var BaseResolver, XMLHttpRequest, extend, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

XMLHttpRequest = XMLHttpRequest || require('xmlhttprequest').XMLHttpRequest;

_ref = require('songlocator-base'), BaseResolver = _ref.BaseResolver, extend = _ref.extend;

exports.window = typeof window !== "undefined" && window !== null ? window : {
  localStorage: {},
  sessionStorage: {}
};

exports.Tomahawk = {
  resolver: {},
  readBase64: function() {
    return void 0;
  },
  extend: function(base, obj) {
    var AdaptedResolver;
    AdaptedResolver = (function(_super) {

      __extends(AdaptedResolver, _super);

      function AdaptedResolver(settings) {
        if (settings == null) {
          settings = {};
        }
        this.init();
        this.settings = extend({}, this.settings || {}, settings);
      }

      return AdaptedResolver;

    })(BaseResolver);
    extend(AdaptedResolver.prototype, base, obj);
    return AdaptedResolver;
  },
  log: function(message) {},
  asyncRequest: function(url, callback, extraHeaders) {
    var headerName, xmlHttpRequest, _i, _len;
    xmlHttpRequest = new XMLHttpRequest();
    xmlHttpRequest.open('GET', url, true);
    if (extraHeaders) {
      for (_i = 0, _len = extraHeaders.length; _i < _len; _i++) {
        headerName = extraHeaders[_i];
        xmlHttpRequest.setRequestHeader(headerName, extraHeaders[headerName]);
      }
    }
    xmlHttpRequest.onreadystatechange = function() {
      if (xmlHttpRequest.readyState === 4 && xmlHttpRequest.status === 200) {
        return callback.call(exports.window, xmlHttpRequest);
      } else if (xmlHttpRequest.readyState === 4) {
        exports.Tomahawk.log("Failed to do GET request: to: " + url);
        return exports.Tomahawk.log("Status Code was: " + xmlHttpRequest.status);
      }
    };
    return xmlHttpRequest.send(null);
  }
};

exports.TomahawkResolver = {
  init: function() {},
  scriptPath: function() {
    return '';
  },
  getConfigUi: function() {
    return {};
  },
  getUserConfig: function() {
    return {};
  },
  saveUserConfig: function() {},
  newConfigSaved: function() {},
  resolve: function(qid, artist, album, title) {
    return {
      qid: qid
    };
  },
  search: function(qid, searchString) {
    return this.resolve(qid, "", "", searchString);
  },
  addTrackResults: function(results) {
    if (results.results) {
      results.results = results.results.filter(function(r) {
        return r;
      });
    }
    return this.emit('results', results);
  }
};
});
